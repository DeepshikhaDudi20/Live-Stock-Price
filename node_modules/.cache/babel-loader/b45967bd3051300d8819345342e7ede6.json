{"ast":null,"code":"var _jsxFileName = \"/Users/Dee/Downloads/live-stock-price-master/src/Components/StockPrice.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport axios from 'axios';\nimport StockSelect from './StockSelect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StockPrice extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [],\n      selectedCompanySignature: 'FB',\n      selectedCompanyName: 'Facebook'\n    };\n    this.selectStockCompany = this.selectStockCompany.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchStockPrice();\n  }\n  /*****************************************************************************************************\n   To fetch live stock for selected company \n   *****************************************************************************************************/\n\n\n  fetchStockPrice() {\n    const API_KEY = 'HGJWFG4N8AQ66ICD';\n    let stockCompany = this.state.selectedCompanySignature;\n    let stockApi = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${stockCompany}&interval=1min&outputsize=compact&apikey=${API_KEY}`;\n    let stockXValuesDate = [];\n    let stockYValuesPrice = [];\n    axios.get(stockApi).then(stockResponse => {\n      var stockValue = stockResponse.data;\n\n      for (var key in stockValue['Time Series (1min)']) {\n        stockXValuesDate.push(key);\n        stockYValuesPrice.push(stockValue['Time Series (1min)'][key]['1. open']);\n      }\n\n      this.setState({\n        stockChartXValues: stockXValuesDate,\n        stockChartYValues: stockYValuesPrice\n      });\n    }).catch(error => {\n      console.error(error);\n\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n      }\n    });\n  }\n  /*****************************************************************************************************\n   To select company whose stock needs to be displayed on chart\n   *****************************************************************************************************/\n\n\n  selectStockCompany(e) {\n    const changedCompanySignature = e.target.value;\n    const changedCompanyName = e.target.id; // Implemented callback(call to API) as setState is asynchronous \n\n    this.setState({\n      selectedCompanySignature: changedCompanySignature,\n      selectedCompanyName: changedCompanyName\n    }, () => {\n      this.fetchStockPrice();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Live Stock Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StockSelect, {\n        onChange: this.selectStockCompany\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Stock Price for \", this.state.selectedCompanyName, \" : \", this.state.stockChartYValues.length > 1 && this.state.stockChartYValues[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: this.state.stockChartXValues,\n          y: this.state.stockChartYValues,\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: {\n            color: 'blue'\n          }\n        }],\n        layout: {\n          xaxis: {\n            title: {\n              text: \"Time\"\n            }\n          },\n          yaxis: {\n            title: {\n              text: \"Stock price\"\n            }\n          },\n          width: 750,\n          height: 450,\n          title: ''\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default StockPrice;","map":{"version":3,"sources":["/Users/Dee/Downloads/live-stock-price-master/src/Components/StockPrice.js"],"names":["React","Plot","axios","StockSelect","StockPrice","Component","constructor","props","state","stockChartXValues","stockChartYValues","selectedCompanySignature","selectedCompanyName","selectStockCompany","bind","componentDidMount","fetchStockPrice","API_KEY","stockCompany","stockApi","stockXValuesDate","stockYValuesPrice","get","then","stockResponse","stockValue","data","key","push","setState","catch","error","console","response","log","status","e","changedCompanySignature","target","value","changedCompanyName","id","render","length","x","y","type","mode","marker","color","xaxis","title","text","yaxis","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\nimport axios from 'axios';\nimport StockSelect from './StockSelect'\n\nclass StockPrice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockChartXValues: [],\n            stockChartYValues: [],\n            selectedCompanySignature: 'FB',\n            selectedCompanyName: 'Facebook',\n        }\n        this.selectStockCompany = this.selectStockCompany.bind(this);\n    }\n    componentDidMount() {\n        this.fetchStockPrice();\n    }\n/*****************************************************************************************************\n To fetch live stock for selected company \n *****************************************************************************************************/\n    fetchStockPrice() {\n        const API_KEY = 'HGJWFG4N8AQ66ICD';\n        let stockCompany = this.state.selectedCompanySignature;\n        let stockApi = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${stockCompany}&interval=1min&outputsize=compact&apikey=${API_KEY}`;\n        let stockXValuesDate = [];\n        let stockYValuesPrice = [];\n        axios.get(stockApi)\n            .then((stockResponse) => {\n                var stockValue = stockResponse.data;\n                for (var key in stockValue['Time Series (1min)']) {\n                    stockXValuesDate.push(key);\n                    stockYValuesPrice.push(stockValue['Time Series (1min)'][key]['1. open']);\n                }\n                this.setState({\n                    stockChartXValues: stockXValuesDate,\n                    stockChartYValues: stockYValuesPrice\n                });\n            }).catch(error => {\n                console.error(error);\n                if (error.response) {\n                    console.log(error.response.data);\n                    console.log(error.response.status);\n                }\n            });\n    }\n/*****************************************************************************************************\n To select company whose stock needs to be displayed on chart\n *****************************************************************************************************/\n    selectStockCompany(e) {\n        const changedCompanySignature = e.target.value;\n        const changedCompanyName = e.target.id;\n        // Implemented callback(call to API) as setState is asynchronous \n        this.setState({\n            selectedCompanySignature: changedCompanySignature,\n            selectedCompanyName: changedCompanyName\n        }, () => { this.fetchStockPrice() })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Live Stock Price</h1>        \n                <StockSelect onChange={this.selectStockCompany} />\n                <p>Stock Price for {this.state.selectedCompanyName} : {this.state.stockChartYValues.length > 1 &&\n                   this.state.stockChartYValues[0]}</p>  \n                <Plot\n                    data={[\n                        {\n                            x: this.state.stockChartXValues,\n                            y: this.state.stockChartYValues,\n                            type: 'scatter',\n                            mode: 'lines+markers',\n                            marker: { color: 'blue'}\n                        }\n                    ]}\n                    layout={{\n                        xaxis: {\n                            title: {\n                                text: \"Time\"\n                            },\n            \n        \n                        },\n                        yaxis: {\n                            title: {\n                                text: \"Stock price\",\n                            }\n                        },\n                        width: 750, height: 450, title: ''\n                    }}\n                />\n            </div>\n        )\n    }\n}\nexport default StockPrice;"]},"metadata":{},"sourceType":"module"}